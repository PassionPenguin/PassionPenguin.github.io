{
  "title": "启动另外一个Activity",
  "author": "@PassionPenguin",
  "postTime": "1584861859645",
  "imgSrc": "StartingActivity.png",
  "imgDescription": "启动另外一个Activity",
  "content": [
    {
      "innerHTML": "学完上一课后，您已经构建了一个应用，该应用将显示一个 Activity（单个屏幕），其中包括两个文本框架。在本节课，您将添加输入框和按钮，并向 MainActivity 添加一些代码，以便在用户点按发送按钮时，启动一个显示消息的新 Activity。"
    },
    {
      "type": "subtitle",
      "innerHTML": "添加输入框和按钮",
      "id": "AddingInputBoxAndButton"
    },
    {
      "innerHTML": "首先我们打开上一个项目，进入<code>activity_main.xml</code>，然后让我们添加两个 View 控件：<code>&lt;EditText/></pg-code> 和 <pg-code>&lt;Button/></code>，在这里我们选择用一个<pg-code>&lt;LinearLayout>&lt;/LinearLayout></code>包裹着他们，将他们插入扔到TextView的上面，完整的代码如下："
    },
    {
      "innerHTML": "<pre><code class='xml'>&lt;LinearLayout\n        android:id=\"@+id/displayBox\"\n        android:layout_width=\"260dp\"\n        android:layout_height=\"40dp\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintBottom_toBottomOf=\"@+id/textView\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintLeft_toRightOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"&gt;\n\n        &lt;EditText\n            android:id=\"@+id/editText\"\n            android:layout_width=\"200dp\"\n            android:layout_height=\"40dp\"\n            android:inputType=\"text\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintLeft_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n\n        &lt;Button\n            android:id=\"@+id/button\"\n            android:layout_width=\"60dp\"\n            android:layout_height=\"40dp\"\n            android:text=\"确认\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"@id/editText\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n    &lt;/LinearLayout&gt;</code></pre>"
    },
    {
      "innerHTML": "现在我们打开MainActivity.kt，您会看到onCreate函数，在onCreate函数的最下面绑定您的输入框和按钮："
    },
    {
      "innerHTML": "<pre><code class='kotlin'>class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n}</code></pre>我们在setContentView下面添加以下语句：<br><pre><code class='kotlin'>val input = findViewById&lt;EditText>(R.id.editText)\nval button = findViewById&lt;Button>(R.id.button)</code></pre>这样，我们就将输入框和按钮绑定到了脚本之中。值得注意的是，您在输入的时候可能会看到出现错误（以红色波浪线标注）Unresolved reference，这时候您将鼠标悬浮在出错的地方将会看到相应的建议解决方案，这里的建议解决方案为import，出错原因其实是我们没有导入相关，点击import即可解决。<br>（要清除错误，请点击 View 声明，将光标置于其上，然后按 Alt+Enter（或在 Mac 上按 Option+Enter）进行快速修复。如果出现一个菜单，请选择 Import class。）"
    },
    {
      "type": "img",
      "imgSrc": "StartingActivity/UnresolvedRef.png",
      "imgDescription": "UnresolvedRef"
    },
    {
      "type": "subtitle",
      "innerHTML": "构建Intent",
      "id": "CreatingIntent"
    },
    {
      "innerHTML": "Intent 是在相互独立的组件（如两个 Activity）之间提供运行时绑定功能的对象。Intent 表示应用执行某项操作的意图。您可以使用 Intent 执行多种任务，但在本课中，您的 Intent 将用于启动另一个 Activity。<br>在 MainActivity 中，添加 EXTRA_MESSAGE 常量和 sendMessage() 代码，如下所示：<pre><code class='kotlin'>button.setOnClickListener {\n    val intent = Intent(this, DisplayMsgActivity::class.java).apply {\n        putExtra(\"value\",input.text.toString())\n    }\n    startActivity(intent);\n}</code></pre>预计 Android Studio 会再次遇到 Cannot resolve symbol 错误。要清除这些错误，请按 Alt+Enter（或在 Mac 上按 Option+Return）。您最后应导入以下内容：<br><pre><code class='kotlin'>import androidx.appcompat.app.AppCompatActivity\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.EditText</code></pre>DisplayMessageActivity 仍有错误，但没有关系。您将在下一部分中修复该错误。"
    },
    {
      "type": "subtitle",
      "innerHTML": "创建Activity",
      "id": "CreatingActivity"
    },
    {
      "innerHTML": "要创建第二个 Activity，请按以下步骤操作：<br>1. 在 Project 窗口中，右键点击 app 文件夹，然后依次选择 New > Activity > Empty Activity。"
    },
    {
      "type": "img",
      "imgSrc": "StartingActivity/CreatingActivity.png",
      "imgDescription": "CreatingActivity"
    },
    {
      "innerHTML": "2. 在 Configure Activity 窗口中，输入“DisplayMessageActivity”作为 Activity Name。将所有其他属性保留为默认设置，然后点击 Finish。"
    },
    {
      "type": "img",
      "imgSrc": "StartingActivity/ConfigureActivity.png",
      "imgDescription": "ConfigureActivity"
    },
    {
      "innerHTML": "Android Studio 会自动执行三项操作：<br><ol><li>创建 DisplayMessageActivity 文件。</li><li>创建与 DisplayMessageActivity 文件对应的布局文件 activity_display_message.xml。</li><li>在 AndroidManifest.xml 中添加所需的 &lt;activity> 元素。</li><li>如果您运行应用并点按第一个 Activity 上的按钮，将启动第二个 Activity，但它为空。这是因为第二个 Activity 使用模板提供的空布局。</li></ol>"
    },
    {
      "innerHTML": "我们在activity_display_msg.xml中插入一个TextView用于显示传递过来的信息，全部代码如下：<pre><code class='xml'>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".DisplayMsgActivity\"&gt;\n\n    &lt;TextView\n        android:id=\"@+id/resultText\"\n        android:layout_width=\"200dp\"\n        android:layout_height=\"40dp\"\n        android:textSize=\"20sp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</code></pre>然后我们前往DisplayMesssageActivity脚本文件修改如下：<pre><code class='kotlin'>// Get the Intent that started this activity and extract the string\nval message = intent.getStringExtra(\"value\")\nfindViewById<TextView>(R.id.resultText).text = message</code></pre>本课到此就结束了，您已经构建了自己的第一个 Android 应用！运行效果如此："
    },
    {
      "type": "img",
      "imgSrc": "StartingActivity/MainActivity.png",
      "imgDescription": "MainActivity"
    },
    {
      "type": "img",
      "imgSrc": "StartingActivity/DisplayMsgActivity.png",
      "imgDescription": "DisplayMsgActivity"
    }
  ]
}